{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kpgirishbhai/Downloads/react-project/meme-generator/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/kpgirishbhai/Downloads/react-project/meme-generator/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/kpgirishbhai/Downloads/react-project/meme-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { resolveUrl } from './util';\nimport { getMimeType } from './mimes';\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl';\nvar URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nvar URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g;\nvar FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nfunction toRegex(url) {\n  // eslint-disable-next-line no-useless-escape\n  var escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n  return new RegExp(\"(url\\\\(['\\\"]?)(\".concat(escaped, \")(['\\\"]?\\\\))\"), 'g');\n}\nexport function parseURLs(cssText) {\n  var urls = [];\n  cssText.replace(URL_REGEX, function (raw, quotation, url) {\n    urls.push(url);\n    return raw;\n  });\n  return urls.filter(function (url) {\n    return !isDataUrl(url);\n  });\n}\nexport function embed(_x, _x2, _x3, _x4, _x5) {\n  return _embed.apply(this, arguments);\n}\nfunction _embed() {\n  _embed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cssText, resourceURL, baseURL, options, getContentFromUrl) {\n    var resolvedURL, contentType, dataURL, content;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n          contentType = getMimeType(resourceURL);\n          if (!getContentFromUrl) {\n            _context.next = 10;\n            break;\n          }\n          _context.next = 6;\n          return getContentFromUrl(resolvedURL);\n        case 6:\n          content = _context.sent;\n          dataURL = makeDataUrl(content, contentType);\n          _context.next = 13;\n          break;\n        case 10:\n          _context.next = 12;\n          return resourceToDataURL(resolvedURL, contentType, options);\n        case 12:\n          dataURL = _context.sent;\n        case 13:\n          return _context.abrupt(\"return\", cssText.replace(toRegex(resourceURL), \"$1\".concat(dataURL, \"$3\")));\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](0);\n        case 18:\n          return _context.abrupt(\"return\", cssText);\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 16]]);\n  }));\n  return _embed.apply(this, arguments);\n}\nfunction filterPreferredFontFormat(str, _ref) {\n  var preferredFontFormat = _ref.preferredFontFormat;\n  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, function (match) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      var _ref2 = URL_WITH_FORMAT_REGEX.exec(match) || [],\n        _ref3 = _slicedToArray(_ref2, 3),\n        src = _ref3[0],\n        format = _ref3[2];\n      if (!format) {\n        return '';\n      }\n      if (format === preferredFontFormat) {\n        return \"src: \".concat(src, \";\");\n      }\n    }\n  });\n}\nexport function shouldEmbed(url) {\n  return url.search(URL_REGEX) !== -1;\n}\nexport function embedResources(_x6, _x7, _x8) {\n  return _embedResources.apply(this, arguments);\n}\nfunction _embedResources() {\n  _embedResources = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cssText, baseUrl, options) {\n    var filteredCSSText, urls;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (shouldEmbed(cssText)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\", cssText);\n        case 2:\n          filteredCSSText = filterPreferredFontFormat(cssText, options);\n          urls = parseURLs(filteredCSSText);\n          return _context2.abrupt(\"return\", urls.reduce(function (deferred, url) {\n            return deferred.then(function (css) {\n              return embed(css, url, baseUrl, options);\n            });\n          }, Promise.resolve(filteredCSSText)));\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _embedResources.apply(this, arguments);\n}","map":{"version":3,"names":["resolveUrl","getMimeType","isDataUrl","makeDataUrl","resourceToDataURL","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","url","escaped","replace","RegExp","concat","parseURLs","cssText","urls","raw","quotation","push","filter","embed","_x","_x2","_x3","_x4","_x5","_embed","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resourceURL","baseURL","options","getContentFromUrl","resolvedURL","contentType","dataURL","content","wrap","_callee$","_context","prev","next","sent","abrupt","t0","stop","filterPreferredFontFormat","str","_ref","preferredFontFormat","match","_ref2","exec","_ref3","_slicedToArray","src","format","shouldEmbed","search","embedResources","_x6","_x7","_x8","_embedResources","_callee2","baseUrl","filteredCSSText","_callee2$","_context2","reduce","deferred","then","css","Promise","resolve"],"sources":["/Users/kpgirishbhai/Downloads/react-project/meme-generator/node_modules/html-to-image/src/embed-resources.ts"],"sourcesContent":["import { Options } from './types'\nimport { resolveUrl } from './util'\nimport { getMimeType } from './mimes'\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl'\n\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g\n\nfunction toRegex(url: string): RegExp {\n  // eslint-disable-next-line no-useless-escape\n  const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1')\n  return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g')\n}\n\nexport function parseURLs(cssText: string): string[] {\n  const urls: string[] = []\n\n  cssText.replace(URL_REGEX, (raw, quotation, url) => {\n    urls.push(url)\n    return raw\n  })\n\n  return urls.filter((url) => !isDataUrl(url))\n}\n\nexport async function embed(\n  cssText: string,\n  resourceURL: string,\n  baseURL: string | null,\n  options: Options,\n  getContentFromUrl?: (url: string) => Promise<string>,\n): Promise<string> {\n  try {\n    const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL\n    const contentType = getMimeType(resourceURL)\n    let dataURL: string\n    if (getContentFromUrl) {\n      const content = await getContentFromUrl(resolvedURL)\n      dataURL = makeDataUrl(content, contentType)\n    } else {\n      dataURL = await resourceToDataURL(resolvedURL, contentType, options)\n    }\n    return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`)\n  } catch (error) {\n    // pass\n  }\n  return cssText\n}\n\nfunction filterPreferredFontFormat(\n  str: string,\n  { preferredFontFormat }: Options,\n): string {\n  return !preferredFontFormat\n    ? str\n    : str.replace(FONT_SRC_REGEX, (match: string) => {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || []\n          if (!format) {\n            return ''\n          }\n\n          if (format === preferredFontFormat) {\n            return `src: ${src};`\n          }\n        }\n      })\n}\n\nexport function shouldEmbed(url: string): boolean {\n  return url.search(URL_REGEX) !== -1\n}\n\nexport async function embedResources(\n  cssText: string,\n  baseUrl: string | null,\n  options: Options,\n): Promise<string> {\n  if (!shouldEmbed(cssText)) {\n    return cssText\n  }\n\n  const filteredCSSText = filterPreferredFontFormat(cssText, options)\n  const urls = parseURLs(filteredCSSText)\n  return urls.reduce(\n    (deferred, url) =>\n      deferred.then((css) => embed(css, url, baseUrl, options)),\n    Promise.resolve(filteredCSSText),\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}