{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kpgirishbhai/Downloads/react-project/meme-generator/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/kpgirishbhai/Downloads/react-project/meme-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { toArray } from './util';\nimport { fetchAsDataURL } from './dataurl';\nimport { shouldEmbed, embedResources } from './embed-resources';\nvar cssFetchCache = {};\nfunction fetchCSS(_x) {\n  return _fetchCSS.apply(this, arguments);\n}\nfunction _fetchCSS() {\n  _fetchCSS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n    var cache, res, cssText;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          cache = cssFetchCache[url];\n          if (!(cache != null)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", cache);\n        case 3:\n          _context.next = 5;\n          return fetch(url);\n        case 5:\n          res = _context.sent;\n          _context.next = 8;\n          return res.text();\n        case 8:\n          cssText = _context.sent;\n          cache = {\n            url: url,\n            cssText: cssText\n          };\n          cssFetchCache[url] = cache;\n          return _context.abrupt(\"return\", cache);\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _fetchCSS.apply(this, arguments);\n}\nfunction embedFonts(_x2, _x3) {\n  return _embedFonts.apply(this, arguments);\n}\nfunction _embedFonts() {\n  _embedFonts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data, options) {\n    var cssText, regexUrl, fontLocs, loadFonts;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          cssText = data.cssText;\n          regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n          fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n          loadFonts = fontLocs.map( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(loc) {\n              var url;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    url = loc.replace(regexUrl, '$1');\n                    if (!url.startsWith('https://')) {\n                      url = new URL(url, data.url).href;\n                    }\n                    return _context2.abrupt(\"return\", fetchAsDataURL(url, options.fetchRequestInit, function (_ref2) {\n                      var result = _ref2.result;\n                      cssText = cssText.replace(loc, \"url(\".concat(result, \")\"));\n                      return [loc, result];\n                    }));\n                  case 3:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            return function (_x12) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n          return _context3.abrupt(\"return\", Promise.all(loadFonts).then(function () {\n            return cssText;\n          }));\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _embedFonts.apply(this, arguments);\n}\nfunction parseCSS(source) {\n  if (source == null) {\n    return [];\n  }\n  var result = [];\n  var commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi;\n  // strip out comments\n  var cssText = source.replace(commentsRegex, '');\n  // eslint-disable-next-line prefer-regex-literals\n  var keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi');\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    var matches = keyframesRegex.exec(cssText);\n    if (matches === null) {\n      break;\n    }\n    result.push(matches[0]);\n  }\n  cssText = cssText.replace(keyframesRegex, '');\n  var importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi;\n  // to match css & media queries together\n  var combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' + '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})';\n  // unified regex\n  var unifiedRegex = new RegExp(combinedCSSRegex, 'gi');\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    var _matches = importRegex.exec(cssText);\n    if (_matches === null) {\n      _matches = unifiedRegex.exec(cssText);\n      if (_matches === null) {\n        break;\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex;\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex;\n    }\n    result.push(_matches[0]);\n  }\n  return result;\n}\nfunction getCSSRules(_x4, _x5) {\n  return _getCSSRules.apply(this, arguments);\n}\nfunction _getCSSRules() {\n  _getCSSRules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(styleSheets, options) {\n    var ret, deferreds;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          ret = [];\n          deferreds = []; // First loop inlines imports\n          styleSheets.forEach(function (sheet) {\n            if ('cssRules' in sheet) {\n              try {\n                toArray(sheet.cssRules || []).forEach(function (item, index) {\n                  if (item.type === CSSRule.IMPORT_RULE) {\n                    var importIndex = index + 1;\n                    var url = item.href;\n                    var deferred = fetchCSS(url).then(function (metadata) {\n                      return embedFonts(metadata, options);\n                    }).then(function (cssText) {\n                      return parseCSS(cssText).forEach(function (rule) {\n                        try {\n                          sheet.insertRule(rule, rule.startsWith('@import') ? importIndex += 1 : sheet.cssRules.length);\n                        } catch (error) {\n                          console.error('Error inserting rule from remote css', {\n                            rule: rule,\n                            error: error\n                          });\n                        }\n                      });\n                    }).catch(function (e) {\n                      console.error('Error loading remote css', e.toString());\n                    });\n                    deferreds.push(deferred);\n                  }\n                });\n              } catch (e) {\n                var inline = styleSheets.find(function (a) {\n                  return a.href == null;\n                }) || document.styleSheets[0];\n                if (sheet.href != null) {\n                  deferreds.push(fetchCSS(sheet.href).then(function (metadata) {\n                    return embedFonts(metadata, options);\n                  }).then(function (cssText) {\n                    return parseCSS(cssText).forEach(function (rule) {\n                      inline.insertRule(rule, sheet.cssRules.length);\n                    });\n                  }).catch(function (err) {\n                    console.error('Error loading remote stylesheet', err);\n                  }));\n                }\n                console.error('Error inlining remote css file', e);\n              }\n            }\n          });\n          return _context4.abrupt(\"return\", Promise.all(deferreds).then(function () {\n            // Second loop parses rules\n            styleSheets.forEach(function (sheet) {\n              if ('cssRules' in sheet) {\n                try {\n                  toArray(sheet.cssRules || []).forEach(function (item) {\n                    ret.push(item);\n                  });\n                } catch (e) {\n                  console.error(\"Error while reading CSS rules from \".concat(sheet.href), e);\n                }\n              }\n            });\n            return ret;\n          }));\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _getCSSRules.apply(this, arguments);\n}\nfunction getWebFontRules(cssRules) {\n  return cssRules.filter(function (rule) {\n    return rule.type === CSSRule.FONT_FACE_RULE;\n  }).filter(function (rule) {\n    return shouldEmbed(rule.style.getPropertyValue('src'));\n  });\n}\nfunction parseWebFontRules(_x6, _x7) {\n  return _parseWebFontRules.apply(this, arguments);\n}\nfunction _parseWebFontRules() {\n  _parseWebFontRules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(node, options) {\n    var styleSheets, cssRules;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!(node.ownerDocument == null)) {\n            _context5.next = 2;\n            break;\n          }\n          throw new Error('Provided element is not within a Document');\n        case 2:\n          styleSheets = toArray(node.ownerDocument.styleSheets);\n          _context5.next = 5;\n          return getCSSRules(styleSheets, options);\n        case 5:\n          cssRules = _context5.sent;\n          return _context5.abrupt(\"return\", getWebFontRules(cssRules));\n        case 7:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _parseWebFontRules.apply(this, arguments);\n}\nexport function getWebFontCSS(_x8, _x9) {\n  return _getWebFontCSS.apply(this, arguments);\n}\nfunction _getWebFontCSS() {\n  _getWebFontCSS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(node, options) {\n    var rules, cssTexts;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return parseWebFontRules(node, options);\n        case 2:\n          rules = _context6.sent;\n          _context6.next = 5;\n          return Promise.all(rules.map(function (rule) {\n            var baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n            return embedResources(rule.cssText, baseUrl, options);\n          }));\n        case 5:\n          cssTexts = _context6.sent;\n          return _context6.abrupt(\"return\", cssTexts.join('\\n'));\n        case 7:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return _getWebFontCSS.apply(this, arguments);\n}\nexport function embedWebFonts(_x10, _x11) {\n  return _embedWebFonts.apply(this, arguments);\n}\nfunction _embedWebFonts() {\n  _embedWebFonts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(clonedNode, options) {\n    var cssText, styleNode, sytleContent;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(options.fontEmbedCSS != null)) {\n            _context7.next = 4;\n            break;\n          }\n          _context7.t0 = options.fontEmbedCSS;\n          _context7.next = 12;\n          break;\n        case 4:\n          if (!options.skipFonts) {\n            _context7.next = 8;\n            break;\n          }\n          _context7.t1 = null;\n          _context7.next = 11;\n          break;\n        case 8:\n          _context7.next = 10;\n          return getWebFontCSS(clonedNode, options);\n        case 10:\n          _context7.t1 = _context7.sent;\n        case 11:\n          _context7.t0 = _context7.t1;\n        case 12:\n          cssText = _context7.t0;\n          if (cssText) {\n            styleNode = document.createElement('style');\n            sytleContent = document.createTextNode(cssText);\n            styleNode.appendChild(sytleContent);\n            if (clonedNode.firstChild) {\n              clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n            } else {\n              clonedNode.appendChild(styleNode);\n            }\n          }\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _embedWebFonts.apply(this, arguments);\n}","map":{"version":3,"names":["toArray","fetchAsDataURL","shouldEmbed","embedResources","cssFetchCache","fetchCSS","_x","_fetchCSS","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","cache","res","cssText","wrap","_callee$","_context","prev","next","abrupt","fetch","sent","text","stop","embedFonts","_x2","_x3","_embedFonts","_callee3","data","options","regexUrl","fontLocs","loadFonts","_callee3$","_context3","match","map","_ref","_callee2","loc","_callee2$","_context2","replace","startsWith","URL","href","fetchRequestInit","_ref2","result","concat","_x12","Promise","all","then","parseCSS","source","commentsRegex","keyframesRegex","RegExp","matches","exec","push","importRegex","combinedCSSRegex","unifiedRegex","lastIndex","getCSSRules","_x4","_x5","_getCSSRules","_callee4","styleSheets","ret","deferreds","_callee4$","_context4","forEach","sheet","cssRules","item","index","type","CSSRule","IMPORT_RULE","importIndex","deferred","metadata","rule","insertRule","length","error","console","catch","e","toString","inline","find","a","document","err","getWebFontRules","filter","FONT_FACE_RULE","style","getPropertyValue","parseWebFontRules","_x6","_x7","_parseWebFontRules","_callee5","node","_callee5$","_context5","ownerDocument","Error","getWebFontCSS","_x8","_x9","_getWebFontCSS","_callee6","rules","cssTexts","_callee6$","_context6","baseUrl","parentStyleSheet","join","embedWebFonts","_x10","_x11","_embedWebFonts","_callee7","clonedNode","styleNode","sytleContent","_callee7$","_context7","fontEmbedCSS","t0","skipFonts","t1","createElement","createTextNode","appendChild","firstChild","insertBefore"],"sources":["/Users/kpgirishbhai/Downloads/react-project/meme-generator/node_modules/html-to-image/src/embed-webfonts.ts"],"sourcesContent":["import type { Options } from './types'\nimport { toArray } from './util'\nimport { fetchAsDataURL } from './dataurl'\nimport { shouldEmbed, embedResources } from './embed-resources'\n\ninterface Metadata {\n  url: string\n  cssText: string\n}\n\nconst cssFetchCache: { [href: string]: Metadata } = {}\n\nasync function fetchCSS(url: string) {\n  let cache = cssFetchCache[url]\n  if (cache != null) {\n    return cache\n  }\n\n  const res = await fetch(url)\n  const cssText = await res.text()\n  cache = { url, cssText }\n\n  cssFetchCache[url] = cache\n\n  return cache\n}\n\nasync function embedFonts(data: Metadata, options: Options): Promise<string> {\n  let cssText = data.cssText\n  const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g\n  const fontLocs = cssText.match(/url\\([^)]+\\)/g) || []\n  const loadFonts = fontLocs.map(async (loc: string) => {\n    let url = loc.replace(regexUrl, '$1')\n    if (!url.startsWith('https://')) {\n      url = new URL(url, data.url).href\n    }\n\n    return fetchAsDataURL<[string, string]>(\n      url,\n      options.fetchRequestInit,\n      ({ result }) => {\n        cssText = cssText.replace(loc, `url(${result})`)\n        return [loc, result]\n      },\n    )\n  })\n\n  return Promise.all(loadFonts).then(() => cssText)\n}\n\nfunction parseCSS(source: string) {\n  if (source == null) {\n    return []\n  }\n\n  const result: string[] = []\n  const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi\n  // strip out comments\n  let cssText = source.replace(commentsRegex, '')\n\n  // eslint-disable-next-line prefer-regex-literals\n  const keyframesRegex = new RegExp(\n    '((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})',\n    'gi',\n  )\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const matches = keyframesRegex.exec(cssText)\n    if (matches === null) {\n      break\n    }\n    result.push(matches[0])\n  }\n  cssText = cssText.replace(keyframesRegex, '')\n\n  const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi\n  // to match css & media queries together\n  const combinedCSSRegex =\n    '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' +\n    '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'\n  // unified regex\n  const unifiedRegex = new RegExp(combinedCSSRegex, 'gi')\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let matches = importRegex.exec(cssText)\n    if (matches === null) {\n      matches = unifiedRegex.exec(cssText)\n      if (matches === null) {\n        break\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex\n    }\n    result.push(matches[0])\n  }\n\n  return result\n}\n\nasync function getCSSRules(\n  styleSheets: CSSStyleSheet[],\n  options: Options,\n): Promise<CSSStyleRule[]> {\n  const ret: CSSStyleRule[] = []\n  const deferreds: Promise<number | void>[] = []\n\n  // First loop inlines imports\n  styleSheets.forEach((sheet) => {\n    if ('cssRules' in sheet) {\n      try {\n        toArray<CSSRule>(sheet.cssRules || []).forEach((item, index) => {\n          if (item.type === CSSRule.IMPORT_RULE) {\n            let importIndex = index + 1\n            const url = (item as CSSImportRule).href\n            const deferred = fetchCSS(url)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  try {\n                    sheet.insertRule(\n                      rule,\n                      rule.startsWith('@import')\n                        ? (importIndex += 1)\n                        : sheet.cssRules.length,\n                    )\n                  } catch (error) {\n                    console.error('Error inserting rule from remote css', {\n                      rule,\n                      error,\n                    })\n                  }\n                }),\n              )\n              .catch((e) => {\n                console.error('Error loading remote css', e.toString())\n              })\n\n            deferreds.push(deferred)\n          }\n        })\n      } catch (e) {\n        const inline =\n          styleSheets.find((a) => a.href == null) || document.styleSheets[0]\n        if (sheet.href != null) {\n          deferreds.push(\n            fetchCSS(sheet.href)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  inline.insertRule(rule, sheet.cssRules.length)\n                }),\n              )\n              .catch((err: unknown) => {\n                console.error('Error loading remote stylesheet', err)\n              }),\n          )\n        }\n        console.error('Error inlining remote css file', e)\n      }\n    }\n  })\n\n  return Promise.all(deferreds).then(() => {\n    // Second loop parses rules\n    styleSheets.forEach((sheet) => {\n      if ('cssRules' in sheet) {\n        try {\n          toArray<CSSStyleRule>(sheet.cssRules || []).forEach((item) => {\n            ret.push(item)\n          })\n        } catch (e) {\n          console.error(`Error while reading CSS rules from ${sheet.href}`, e)\n        }\n      }\n    })\n\n    return ret\n  })\n}\n\nfunction getWebFontRules(cssRules: CSSStyleRule[]): CSSStyleRule[] {\n  return cssRules\n    .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)\n    .filter((rule) => shouldEmbed(rule.style.getPropertyValue('src')))\n}\n\nasync function parseWebFontRules<T extends HTMLElement>(\n  node: T,\n  options: Options,\n) {\n  if (node.ownerDocument == null) {\n    throw new Error('Provided element is not within a Document')\n  }\n\n  const styleSheets = toArray<CSSStyleSheet>(node.ownerDocument.styleSheets)\n  const cssRules = await getCSSRules(styleSheets, options)\n\n  return getWebFontRules(cssRules)\n}\n\nexport async function getWebFontCSS<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): Promise<string> {\n  const rules = await parseWebFontRules(node, options)\n  const cssTexts = await Promise.all(\n    rules.map((rule) => {\n      const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null\n      return embedResources(rule.cssText, baseUrl, options)\n    }),\n  )\n\n  return cssTexts.join('\\n')\n}\n\nexport async function embedWebFonts<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const cssText =\n    options.fontEmbedCSS != null\n      ? options.fontEmbedCSS\n      : options.skipFonts\n      ? null\n      : await getWebFontCSS(clonedNode, options)\n\n  if (cssText) {\n    const styleNode = document.createElement('style')\n    const sytleContent = document.createTextNode(cssText)\n\n    styleNode.appendChild(sytleContent)\n\n    if (clonedNode.firstChild) {\n      clonedNode.insertBefore(styleNode, clonedNode.firstChild)\n    } else {\n      clonedNode.appendChild(styleNode)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}