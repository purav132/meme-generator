[{"/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/index.js":"1","/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/App.js":"2","/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/components/Header.js":"3","/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/components/Meme.js":"4"},{"size":164,"mtime":1678169438378,"results":"5","hashOfConfig":"6"},{"size":255,"mtime":1678169253867,"results":"7","hashOfConfig":"6"},{"size":381,"mtime":1677590170821,"results":"8","hashOfConfig":"6"},{"size":2570,"mtime":1678169543104,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7iw8no",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/index.js",[],[],"/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/App.js",[],[],"/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/components/Header.js",[],[],[],"/Users/kpgirishbhai/Downloads/react-project/meme-generator/src/components/Meme.js",["24"],[],"import React from \"react\";\n// import html2canvas from \"html2canvas\";\nimport { toJpeg } from \"html-to-image\";\nimport format from \"date-fns/format\";\n// import memesData from \"../memesData\";\n\nexport default function Meme() {\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImg: \"http://i.imgflip.com/1bij.jpg\",\n  });\n\n  const [allMeme, setAllMeme] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((data) => setAllMeme(data.data.memes));\n  }, []);\n\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMeme.length);\n    setMeme((prevMeme) => ({\n      ...prevMeme,\n      randomImg: allMeme[randomNumber].url,\n      topText: \"\",\n      bottomText: \"\",\n    }));\n  }\n\n  function handleChange(event) {\n    setMeme((prevMeme) => ({\n      ...prevMeme,\n      [event.target.name]: event.target.value,\n    }));\n  }\n\n  const ref = React.useRef(null);\n\n  const handleDownloadImage = React.useCallback(() => {\n    if (ref.current === null) {\n      return;\n    }\n    toJpeg(ref.current, { cacheBust: true })\n      .then((dataUrl) => {\n        const link = document.createElement(\"a\");\n        link.download = `${format(new Date(), \"'meme-'HH-mm-ss\")}.jpg`;\n        link.href = dataUrl;\n        link.click();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [ref]);\n\n  return (\n    <main>\n      <div className=\"meme-form\">\n        <div className=\"meme-form-input\">\n          <input\n            className=\"meme-form-input1\"\n            type=\"text\"\n            placeholder=\"Top Text\"\n            name=\"topText\"\n            value={meme.topText}\n            onChange={handleChange}\n          />\n          <input\n            className=\"meme-form-input2\"\n            type=\"text\"\n            placeholder=\"Bottom Text\"\n            name=\"bottomText\"\n            value={meme.bottomText}\n            onChange={handleChange}\n          />\n        </div>\n        <button className=\"meme-form-submit\" onClick={getMemeImage}>\n          Get a new meme image 🖼\n        </button>\n      </div>\n      <div ref={ref} className=\"meme\">\n        <img src={meme.randomImg} className=\"meme-photo\" />\n        <h2 className=\"meme--text top\">{meme.topText}</h2>\n        <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n      </div>\n      <button\n        className=\"meme-download-button\"\n        type=\"button\"\n        onClick={handleDownloadImage}\n      >\n        Download Meme 👇🏻\n      </button>\n    </main>\n  );\n}\n",{"ruleId":"25","severity":1,"message":"26","line":82,"column":9,"nodeType":"27","endLine":82,"endColumn":60},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]